// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/db/models"
)

func newCncChecker(db *gorm.DB, opts ...gen.DOOption) cncChecker {
	_cncChecker := cncChecker{}

	_cncChecker.cncCheckerDo.UseDB(db, opts...)
	_cncChecker.cncCheckerDo.UseModel(&models.CncChecker{})

	tableName := _cncChecker.cncCheckerDo.TableName()
	_cncChecker.ALL = field.NewAsterisk(tableName)
	_cncChecker.ID = field.NewUint64(tableName, "id")
	_cncChecker.StatusID = field.NewUint64(tableName, "status_id")
	_cncChecker.Username = field.NewString(tableName, "username")
	_cncChecker.PasswordHash = field.NewString(tableName, "password_hash")
	_cncChecker.CreatedAt = field.NewInt64(tableName, "created_at")
	_cncChecker.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_cncChecker.DeletedAt = field.NewField(tableName, "deleted_at")
	_cncChecker.Status = cncCheckerBelongsToStatus{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Status", "models.CncStatus"),
	}

	_cncChecker.fillFieldMap()

	return _cncChecker
}

type cncChecker struct {
	cncCheckerDo

	ALL          field.Asterisk
	ID           field.Uint64
	StatusID     field.Uint64
	Username     field.String
	PasswordHash field.String
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	DeletedAt    field.Field
	Status       cncCheckerBelongsToStatus

	fieldMap map[string]field.Expr
}

func (c cncChecker) Table(newTableName string) *cncChecker {
	c.cncCheckerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cncChecker) As(alias string) *cncChecker {
	c.cncCheckerDo.DO = *(c.cncCheckerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cncChecker) updateTableName(table string) *cncChecker {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.StatusID = field.NewUint64(table, "status_id")
	c.Username = field.NewString(table, "username")
	c.PasswordHash = field.NewString(table, "password_hash")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *cncChecker) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cncChecker) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["status_id"] = c.StatusID
	c.fieldMap["username"] = c.Username
	c.fieldMap["password_hash"] = c.PasswordHash
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt

}

func (c cncChecker) clone(db *gorm.DB) cncChecker {
	c.cncCheckerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cncChecker) replaceDB(db *gorm.DB) cncChecker {
	c.cncCheckerDo.ReplaceDB(db)
	return c
}

type cncCheckerBelongsToStatus struct {
	db *gorm.DB

	field.RelationField
}

func (a cncCheckerBelongsToStatus) Where(conds ...field.Expr) *cncCheckerBelongsToStatus {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cncCheckerBelongsToStatus) WithContext(ctx context.Context) *cncCheckerBelongsToStatus {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cncCheckerBelongsToStatus) Session(session *gorm.Session) *cncCheckerBelongsToStatus {
	a.db = a.db.Session(session)
	return &a
}

func (a cncCheckerBelongsToStatus) Model(m *models.CncChecker) *cncCheckerBelongsToStatusTx {
	return &cncCheckerBelongsToStatusTx{a.db.Model(m).Association(a.Name())}
}

type cncCheckerBelongsToStatusTx struct{ tx *gorm.Association }

func (a cncCheckerBelongsToStatusTx) Find() (result *models.CncStatus, err error) {
	return result, a.tx.Find(&result)
}

func (a cncCheckerBelongsToStatusTx) Append(values ...*models.CncStatus) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cncCheckerBelongsToStatusTx) Replace(values ...*models.CncStatus) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cncCheckerBelongsToStatusTx) Delete(values ...*models.CncStatus) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cncCheckerBelongsToStatusTx) Clear() error {
	return a.tx.Clear()
}

func (a cncCheckerBelongsToStatusTx) Count() int64 {
	return a.tx.Count()
}

type cncCheckerDo struct{ gen.DO }

type ICncCheckerDo interface {
	gen.SubQuery
	Debug() ICncCheckerDo
	WithContext(ctx context.Context) ICncCheckerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICncCheckerDo
	WriteDB() ICncCheckerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICncCheckerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICncCheckerDo
	Not(conds ...gen.Condition) ICncCheckerDo
	Or(conds ...gen.Condition) ICncCheckerDo
	Select(conds ...field.Expr) ICncCheckerDo
	Where(conds ...gen.Condition) ICncCheckerDo
	Order(conds ...field.Expr) ICncCheckerDo
	Distinct(cols ...field.Expr) ICncCheckerDo
	Omit(cols ...field.Expr) ICncCheckerDo
	Join(table schema.Tabler, on ...field.Expr) ICncCheckerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICncCheckerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICncCheckerDo
	Group(cols ...field.Expr) ICncCheckerDo
	Having(conds ...gen.Condition) ICncCheckerDo
	Limit(limit int) ICncCheckerDo
	Offset(offset int) ICncCheckerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICncCheckerDo
	Unscoped() ICncCheckerDo
	Create(values ...*models.CncChecker) error
	CreateInBatches(values []*models.CncChecker, batchSize int) error
	Save(values ...*models.CncChecker) error
	First() (*models.CncChecker, error)
	Take() (*models.CncChecker, error)
	Last() (*models.CncChecker, error)
	Find() ([]*models.CncChecker, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.CncChecker, err error)
	FindInBatches(result *[]*models.CncChecker, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.CncChecker) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICncCheckerDo
	Assign(attrs ...field.AssignExpr) ICncCheckerDo
	Joins(fields ...field.RelationField) ICncCheckerDo
	Preload(fields ...field.RelationField) ICncCheckerDo
	FirstOrInit() (*models.CncChecker, error)
	FirstOrCreate() (*models.CncChecker, error)
	FindByPage(offset int, limit int) (result []*models.CncChecker, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICncCheckerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cncCheckerDo) Debug() ICncCheckerDo {
	return c.withDO(c.DO.Debug())
}

func (c cncCheckerDo) WithContext(ctx context.Context) ICncCheckerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cncCheckerDo) ReadDB() ICncCheckerDo {
	return c.Clauses(dbresolver.Read)
}

func (c cncCheckerDo) WriteDB() ICncCheckerDo {
	return c.Clauses(dbresolver.Write)
}

func (c cncCheckerDo) Session(config *gorm.Session) ICncCheckerDo {
	return c.withDO(c.DO.Session(config))
}

func (c cncCheckerDo) Clauses(conds ...clause.Expression) ICncCheckerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cncCheckerDo) Returning(value interface{}, columns ...string) ICncCheckerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cncCheckerDo) Not(conds ...gen.Condition) ICncCheckerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cncCheckerDo) Or(conds ...gen.Condition) ICncCheckerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cncCheckerDo) Select(conds ...field.Expr) ICncCheckerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cncCheckerDo) Where(conds ...gen.Condition) ICncCheckerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cncCheckerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICncCheckerDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cncCheckerDo) Order(conds ...field.Expr) ICncCheckerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cncCheckerDo) Distinct(cols ...field.Expr) ICncCheckerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cncCheckerDo) Omit(cols ...field.Expr) ICncCheckerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cncCheckerDo) Join(table schema.Tabler, on ...field.Expr) ICncCheckerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cncCheckerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICncCheckerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cncCheckerDo) RightJoin(table schema.Tabler, on ...field.Expr) ICncCheckerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cncCheckerDo) Group(cols ...field.Expr) ICncCheckerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cncCheckerDo) Having(conds ...gen.Condition) ICncCheckerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cncCheckerDo) Limit(limit int) ICncCheckerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cncCheckerDo) Offset(offset int) ICncCheckerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cncCheckerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICncCheckerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cncCheckerDo) Unscoped() ICncCheckerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cncCheckerDo) Create(values ...*models.CncChecker) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cncCheckerDo) CreateInBatches(values []*models.CncChecker, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cncCheckerDo) Save(values ...*models.CncChecker) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cncCheckerDo) First() (*models.CncChecker, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.CncChecker), nil
	}
}

func (c cncCheckerDo) Take() (*models.CncChecker, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.CncChecker), nil
	}
}

func (c cncCheckerDo) Last() (*models.CncChecker, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.CncChecker), nil
	}
}

func (c cncCheckerDo) Find() ([]*models.CncChecker, error) {
	result, err := c.DO.Find()
	return result.([]*models.CncChecker), err
}

func (c cncCheckerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.CncChecker, err error) {
	buf := make([]*models.CncChecker, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cncCheckerDo) FindInBatches(result *[]*models.CncChecker, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cncCheckerDo) Attrs(attrs ...field.AssignExpr) ICncCheckerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cncCheckerDo) Assign(attrs ...field.AssignExpr) ICncCheckerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cncCheckerDo) Joins(fields ...field.RelationField) ICncCheckerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cncCheckerDo) Preload(fields ...field.RelationField) ICncCheckerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cncCheckerDo) FirstOrInit() (*models.CncChecker, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.CncChecker), nil
	}
}

func (c cncCheckerDo) FirstOrCreate() (*models.CncChecker, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.CncChecker), nil
	}
}

func (c cncCheckerDo) FindByPage(offset int, limit int) (result []*models.CncChecker, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cncCheckerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cncCheckerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cncCheckerDo) Delete(models ...*models.CncChecker) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cncCheckerDo) withDO(do gen.Dao) *cncCheckerDo {
	c.DO = *do.(*gen.DO)
	return c
}
